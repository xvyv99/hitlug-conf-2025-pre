#import "../globals.typ": *

= LLVM: 编译器的解绑与模块化

== LLVM 的革命: 解绑编译器

#grid(
  columns: (1fr, 1fr),
  gutter: 2em,
  [
    *前 LLVM 时代的问题*
    
    编译器 *特设且高度耦合*:
    - 虽分三段 (前端/中端/后端)
    - 但针对特定语言或硬件
    - 模块间没有明确界限
    - 不同编译器栈基本不共用代码
    - 无法组合现有前端或后端
    
    #v(0.5em)
    
    #text(fill: rgb(200, 0, 0))[
      $->$ 无法发挥三段式编译器优势
    ]
  ],[
    *LLVM 的突破*
    
    依靠 *解绑* 带来巨大变革:
    - LLVM IR 处于核心地位
    - 使用 CFG + 基础块 + SSA
    - *完备的* 独立表示
    - 作为前后端间的单一桥梁
    
    #v(0.5em)
    
    #text(fill: rgb(0, 100, 0))[
      $->$ 完全解绑编译器前后端
    ]
  ]
)

== LLVM 的革命: 模块化设计
#slide[
  #grid(
    columns: (1fr, 1fr),
    gutter: 2em,
    [
      *组织成库*
      
      - 定义不同模块间的分界
      - 提供合适的 API
      - 选择和组合不同功能
      
      #v(1em)
      
      *催生大量工具:*
      - Clang-Format (代码格式化)
      - Clang-Tidy (静态分析)
      - LLDB (调试器)
      - ...
    ],[
      *文本表示的威力*
      
      *UNIX 哲学*: 简单工具 + 文本管道
      
      ```bash
      cat <file> | cut -f2 | sort | uniq -c
      ```
      
      #v(0.5em)
      
      LLVM IR 的文本表示:
      - 串联各个转换 Pass
      - 方便查看中间状态
      - FileCheck 测试编译器
      - 输入可读文本并检查输出
    ]
  )
  
]

== LLVM 的局限: 中心化的代价

#grid(
  columns: (1fr, 1fr),
  gutter: 2em,
  [
    *问题 1: 中心化导致演进困难*
    
    - LLVM IR 处于 *绝对中心地位*
    - 所有工具、流程都依赖它
    - 修改需满足 *极高条件*:
      - 长时间高强度讨论
      - 各利益相关者同意
      - 避免意想不到的间接效应
    
    #v(0.5em)
    
    #text(fill: rgb(150, 0, 0))[
      $->$ 改动缓慢，特殊需求难满足
    ]
  ],[
    *问题 2: 衍生版本泛滥*
    
    常见方式: *分裂 LLVM，创建衍生版*
    
    - 每天 ~100 次提交到上游
    - 不追踪 $->$ 偏离严重，无法合并
    - 持续追踪 $->$ 专门人力投入
    
    #v(0.5em)
    
    #text(fill: rgb(150, 0, 0))[
      $->$ 全球范围内大量重复劳动
    ]
  ]
)

== LLVM 的局限: 演进 vs 兼容性

#slide[
  #grid(
    columns: (1fr, 1fr),
    gutter: 2em,
    align(horizon)[
      *LLVM IR 的设计权衡*
      
      - 能够协同演进 IR 和编译器
      - 对质量提升至关重要
      - 兼容性保证较弱, 允许不兼容的变动
      

    ],[
      *真正的使用场景:*
      
      作为不同 *软件模块* 间的表示

      #v(1em)

      #text(weight: "bold", fill: rgb(200, 0, 0))[
        不适合的使用场景:
      ]
      
      作为程序的 *传送格式* 给硬件驱动
      

      
      #v(1em)
      
      *教训: SPIR $->$ SPIR-V*
      
    ]
  )
]

== AI 时代的挑战

#slide[
=== 硬件多样性爆炸

]


#slide[
=== 信息丢失问题

]


#slide[
=== 碎片化的编译生态

]
